/* KEYWORDS

	`initial`
		default value, per-property basis (i.e. `display` defaults to `inline`)

		default value, according to user agent stylesheet (i.e. `display` defaults to `block` for `p` elements)

	`inherit`
		parent elementâ€™s value

	`unset`
		`inherit` for naturally-inherited properties, `initial` for everything else

	`none`
		similar to 0, but also applicable to non-numeric values

*/

/* FONT WEIGHTS

	100: Thin
	200: Extra Light / Ultra Light
	300: Light
	400: Normal / Regular
	500: Medium
	600: Semi Bold / Demi Bold
	700: Bold
	800: Extra Bold / Ultra Bold
	900: Black / Heavy

*/

@define-mixin t-background $background: inherit {
	--theme-background: $background;
	background-color: var(--theme-background);
}
@define-mixin t-text $text: inherit {
	--theme-text: $text;
	color: var(--theme-text);
}

@define-mixin l-center $display: grid {
	display: $display;
	justify-content: center; /* center grid in container along inline axis */
	align-content: center; /* center grid in container along block axis */
	justify-items: center; /* center items in columns along inline axis */
	align-items: center; /* center items in rows along block axis */
}
@define-mixin l-column $gap: 0 {
	--_row-gap: $gap;
	display: grid;
	align-content: start;
	row-gap: var(--_row-gap);
}
@define-mixin l-overlay {
	position: absolute;
	inset: 0;
	background-color: transparent;
	font-size: 0;
	user-select: none;
	z-index: 1;
}
@define-mixin l-stack $area {
	display: grid;
	grid-template-areas: "$area";
	&::before, &::after, > :not(picture), > picture > img {
		grid-area: $area;
	}
}
@define-mixin l-subgrid $children: 1 / -1 {
	display: grid;
	grid-template-columns: subgrid;
	> * {
		grid-column: $children;
	}
}

@define-mixin bg-img $image, $size: contain {
	background-image: $image;
	background-repeat: no-repeat;
	background-position: center;
	background-size: $size;
}
@define-mixin bg-mask $image, $color: CurrentColor, $size: contain {
	background-color: $color;
	mask-image: $image;
	mask-repeat: no-repeat;
	mask-position: center;
	mask-size: $size;
}

@define-mixin transparent-interaction {
	pointer-events: none;
	> * {
		pointer-events: initial;
	}
}

@define-mixin underline $width: inherit {
	--_border-width: $width;
	text-decoration-thickness: var(--_border-width);
	text-decoration-line: underline;
	text-decoration-style: solid;
	text-underline-offset: .125em;
}

/* @define-mixin button $background: inherit, $text: inherit {} */

/* @define-mixin link {} */

@define-mixin transition $property: initial, $duration: inherit, $timing-function: inherit {
	--_duration: $duration;
	--_timing-function: $timing-function;
	transition-duration: var(--_duration, 1s);
	transition-timing-function: var(--_timing-function, ease-out);
	transition-property: $property;
}

@define-mixin list-with-commas {
	*, ::before, ::after {
		display: inline;
	}
	:where(&) > * {
		&:not(:last-child) {
			&::after {
				content: ",";
			}
		}
	}
}
