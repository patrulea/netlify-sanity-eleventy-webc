<!---

	[@image]
		referenced image data (object)

	[@max-width]
		limit for [srcset] (integer)

--->

<script webc:type="js">

	/* TODO: account for animated images */

	const buildSanityImageUrl = (src, options = {}) => {
		try {
			const url = new URL(src)
			// set default parameters
			const urlParameters = new URLSearchParams(url.search)
			if (!options.hasOwnProperty("auto") && !options.hasOwnProperty("fm")) {
				urlParameters.set("auto", "format")
			}
			// apply options
			for (const [key, value] of Object.entries(options)) {
				urlParameters.set(key, value)
			}
			// process into string
			url.search = urlParameters.toString()
			return url.toString()
		} catch (error) {
			throw new Error(`Invalid image URL: ${src}`)
		}
	}
	const buildSrcset = (src, widthMax) => {
		const widths = [240, 320, 480, 640, 960, 1280, 1920, 2560, 3840]
		// filter out widths smaller than `widthMax`
		const widthsFiltered = [...widths.filter(width => width < widthMax), widthMax]
		return widthsFiltered.map(w => `${buildSanityImageUrl(src, { w })} ${w}w`).join(", ")
	}

	const imageType = this.image?.extension
	const imageWidth = this.image?.metadata?.dimensions?.width || 800
	const imageWidthMax = parseInt(this.maxWidth, 10) || imageWidth
	const imageHeight = this.image?.metadata?.dimensions?.height || 600
	const imageRatio = this.image?.metadata?.dimensions?.aspectRatio || imageWidth / imageHeight
	const imageUrl = this.image?.url

	imageUrl ?
		// output image markup if `imageUrl` is found
		`<img webc:raw
			${webc.renderAttributes(webc.attributes)}
			${webc.renderAttributes(
				Object.fromEntries(
					Object.entries({
						width: imageWidth,
						height: imageHeight,
						alt: "",
						style: `
							--_width: ${imageWidth + "px"};
							--_height: ${imageHeight + "px"};
							--_aspect-ratio: ${imageRatio};
							${(imageUrl && imageType !== "svg" && this.image?.metadata?.isOpaque) ? `
								--_background-image: url(${buildSanityImageUrl(imageUrl, { w: 4, fm: "webp" })});
							` : ""}
						`,
						sizes: "auto",
						draggable: "false",
						loading: "lazy",
						decoding: "async",
						src: buildSanityImageUrl(imageUrl),
						// omit [srcset] for vectors
						...(imageType !== "svg" && {
							srcset: buildSrcset(imageUrl, imageWidthMax)
						})
					})
					// override default attributes if provided
					.filter(([key]) => !(key in webc.attributes))
				)
			)}
		>`
		// output error paragraph if not
		: `<p webc:raw>No valid image provided.</p>`

</script>
