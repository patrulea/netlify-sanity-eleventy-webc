<!---

	[@image]
		referenced image data (object)

	[@max-width]
		limit for [srcset] (integer)

--->

<script webc:type="js">

	/* TODO:
		- improve and reuse `buildSrc()`
		- leverage Sanity Image parameters (bg, fit, flip)
		- account for animated images
	*/

	const buildSrc = (src, width) => {
		return `${src}?w=${width}&auto=format ${width}w`
	}
	const buildSrcSet = (src, widthMax) => {
		const widths = [240, 320, 480, 640, 960, 1280, 1920, 2560, 3840]
		// filter out widths smaller than `widthMax`
		const widthsFiltered = [...widths.filter(width => width < widthMax), widthMax]
		return widthsFiltered.map(width => buildSrc(src, width)).join(", ")
	}

	const imageType = this.image?.extension
	const imageWidth = this.image?.metadata?.dimensions?.width || 800
	const imageWidthMax = parseInt(this.maxWidth, 10) || imageWidth
	const imageHeight = this.image?.metadata?.dimensions?.height || 600
	const imageRatio = this.image?.metadata?.dimensions?.aspectRatio || imageWidth / imageHeight
	const imageUrl = this.image?.url
	const imageAttributes = {
		width: imageWidth,
		height: imageHeight,
		alt: "",
		style: `
			--_aspect-ratio: ${imageRatio};
			--_width: ${imageWidth + "px"};
			--_height: ${imageHeight + "px"};
		`,
		sizes: "auto",
		draggable: "false",
		loading: "lazy",
		decoding: "async",
		src: `${imageUrl}?auto=format`,
		// omit [srcset] for SVGs
		...(imageType !== "svg" && {
			srcset: buildSrcSet(imageUrl, imageWidthMax)
		})
	}

	imageUrl ?
		// output <img> markup if `imageUrl` is found
		`<img webc:raw
			${webc.renderAttributes(webc.attributes)}
			${webc.renderAttributes(
				Object.fromEntries(
					// override default attributes if provided
					Object.entries(imageAttributes).filter(([key]) => !(key in webc.attributes))
				)
			)}
		>`
		// output error <p> if not
		: `<p webc:raw>No valid image provided.</p>`

</script>
